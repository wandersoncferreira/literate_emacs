;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(string-rectangle-history ivy-history file-name-history minibuffer-history counsel-M-x-history))
(setq ivy-history '(#("use-package" 0 11 (ivy-index 35)) #("prog-mo" 0 7 (ivy-index 0)) #("company-ec" 0 10 (ivy-index 2)) #("company-min" 0 11 (ivy-index 0)) #("company-so" 0 10 (ivy-index 2)) #("company-sor" 0 11 (ivy-index 0)) #("hipp" 0 4 (ivy-index 0)) "insert-shebang-ignore-extensions" #("after-in" 0 8 (ivy-index 1)) #("typo-glob" 0 9 (ivy-index 1)) #("visual-lin" 0 10 (ivy-index 1)) #("deft-auto-sa" 0 12 (ivy-index 1)) #("deft-recu" 0 9 (ivy-index 0)) #("ibuffer-do-so" 0 13 (ivy-index 3)) #("ibuffer-so" 0 10 (ivy-index 0)) "ibuffer-make-column-process" #("ibuffer-h" 0 9 (ivy-index 3)) #("projectile-pro" 0 14 (ivy-index 1)) #("projectile-mode" 0 15 (ivy-index 3)) #("projectile-comp" 0 15 (ivy-index 1)) #("projectile-ena" 0 14 (ivy-index 0)) #("flyspell-mode" 0 13 (ivy-index 0)) #("with-tem" 0 8 (ivy-index 0)) #("file-ex" 0 7 (ivy-index 0)) #("use-package$" 0 12 (ivy-index 0)) #("epg-gp" 0 6 (ivy-index 4)) #("insert-di" 0 9 (ivy-index 0)) #("mac-co" 0 6 (ivy-index 1)) #("mouse-wheel-sc" 0 14 (ivy-index 0)) #("mac-mou" 0 7 (ivy-index 0)) #("ls-lisp-use" 0 11 (ivy-index 0))))
(setq file-name-history '(#("/home/wanderson/dotfiles/emacs/" 0 31 (ivy-index 0)) #("/home/wanderson/.emacs.d/init.el" 0 32 (ivy-index 16)) #("/Users/wandersonferreira/.emacs.d/" 0 34 (ivy-index 0))))
(setq minibuffer-history '("wandersoncferreira"))
(setq counsel-M-x-history '(#("^company-com" 0 12 (ivy-index 0)) #("^hipp" 0 5 (ivy-index 0)) #("^" 0 1 (ivy-index 0))))
(setq kill-ring '(#("TAB>" 0 4 (fontified t face font-lock-string-face)) #("add-hook" 0 4 (fontified t) 4 8 (fontified t)) #("defun " 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t)) #("dired" 0 5 (fontified t face font-lock-function-name-face)) "sort-prefer-same-case-prefix" #("sort-prefer-same-case-prefix" 0 5 (fontified t) 5 12 (fontified t) 12 17 (fontified t) 17 22 (fontified t) 22 28 (fontified t)) #("completio" 0 9 (face font-lock-comment-face fontified t)) #("
" 0 1 (fontified t)) #("
" 0 1 (fontified t)) ";;   :init
;;   (setq dumb-jump-selector 'ivy)
;;   :config
;;   (bind-key* \"M-g o\" 'dumb-jump-go-other-window)
;;   (bind-key* \"M-g j\" 'dumb-jump-go)
;;   (bind-key* \"M-g i\" 'dumb-jump-go-prompt)
;;   (bind-key* \"M-g x\" 'dumb-jump-go-prefer-external)
;;   (bind-key* \"M-g z\" 'dumb-jump-go-prefer-external-other-window))" #("ocmmo" 0 5 (face font-lock-string-face fontified t)) "- [ ] Rotina para inserir os dados de Leitos de um DBC lendo automaticamente todos os files do diretorio de download
- [ ] Rotina para ler 1 CNES da base de dados. Criar metodo `Fill()` para o `struct` que representa a tabela
- [ ] Rotina para ler `n` CNES da base de dados.
- [ ] Executar todas as rotinas respeitando as interfaces de `error` para não ter retrabalho depois." #("tex" 0 3 (fontified t)) #("make-column-process" 0 5 (fontified t) 5 12 (fontified t) 12 19 (fontified t)) #("  
  
  
" 0 2 (fontified t) 2 3 (fontified nil) 3 5 (fontified t) 5 6 (fontified t) 6 9 (fontified t)) #("(use-package flyspell-correct
    :ensure t
    :after flyspell
    :bind (:map flyspell-mode
                (\"C-;\" . flyspell-correct-previous-word-generic)))" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 29 (fontified t face font-lock-constant-face) 29 34 (fontified t) 34 41 (fontified t face font-lock-builtin-face) 41 44 (fontified t) 44 48 (fontified t) 48 54 (fontified t face font-lock-builtin-face) 54 64 (fontified t) 64 68 (fontified t) 68 71 (fontified t face font-lock-builtin-face) 71 73 (face font-lock-builtin-face fontified t) 73 75 (fontified t) 75 79 (face font-lock-builtin-face fontified t) 79 94 (fontified t) 94 97 (fontified t) 97 111 (fontified t) 111 116 (fontified t face font-lock-string-face) 116 160 (fontified t)) #("  :diminish flyspell-mode
" 0 2 (fontified t) 2 11 (fontified t face font-lock-builtin-face) 11 12 (fontified t) 12 25 (fontified t) 25 26 (fontified nil)) #("prog-mode-" 0 5 (fontified t) 5 10 (fontified t)) #("  :config
" 0 2 (fontified t) 2 9 (fontified t face font-lock-builtin-face) 9 10 (fontified nil)) "(setq bk/default-font \"-apple-Monaco-medium-normal-normal-*-14-*-*-*-m-0-iso10646-1\")
(set-face-attribute 'default nil :font bk/default-font)" #("control-modifier" 0 8 (fontified t) 8 16 (fontified t)) #("  (setq ))
" 0 2 (fontified t) 2 3 (fontified t) 3 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) "doc" #("doc" 0 3 (fontified t face font-lock-comment-face)) "(defun lgm/describe-func ()
  \"Jump to Eliso functions.\"
  (interactive)
  (describe-function (function-called-at-point)))

(defun lgm/jump-to-elisp-func-def ()
  \"Jump to Elisp definitions.\"
  (interactive)
  (find-function (function-called-at-point)))

(global-set-key (kbd \"C-h C-j\") 'lgm/jump-to-elisp-func-def)
(global-set-key (kbd \"C-h C-f\") 'lgm/describe-func)

;; smart `beginning-of-line'
(defadvice move-beginning-of-line (around smarter-bol activate)
  \"Move to requested line if needed.\"
  (let ((arg (or (ad-get-arg 0) 1)))
    (when (/= arg 1)
      (forward-line (1- arg))))
  ;; Move to indentation on first call, then to actual BOL on second.
  (let ((pos (point)))
    (back-to-indentation)
    (when (= pos (point))
      ad-do-it)))" #("map flyspell-mode" 0 3 (face font-lock-builtin-face fontified t) 3 4 (fontified t) 4 13 (fontified t) 13 17 (fontified t)) #("map" 0 3 (fontified t)) "(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'text-mode-hook 'flyspell-mode)" "(setq flyspell-issue-welcome-flag nil)
(setq-default ispell-list-command \"list\")
(if isOSX
    (setq-default ispell-program-name \"/usr/local/bin/aspell\")
  (setq-default ispell-program-name \"/usr/bin/aspell\"))
" #("  (setq flyspell-issue))
" 0 2 (fontified t) 2 3 (fontified t) 3 7 (fontified t face font-lock-keyword-face) 7 22 (fontified t) 22 23 (fontified nil) 23 24 (fontified nil) 24 25 (fontified nil)) #("littering-expand-var-file-name " 0 10 (fontified t) 10 17 (fontified t) 17 21 (fontified t) 21 26 (fontified t) 26 31 (fontified t)) ";; savehistn
 (setq savehist-file (no-littering-expand-var-file-name \"savehist.log\"))
 (savehist-mode 1)
 (setq history-length t)
 (setq savehist-save-minibuffer-history 1)
 (setq savehist-additional-variables
	  '(kill-ring
	    search-ring
	    regexp-search-ring))" #("littering-expand-var-file-name " 0 10 (fontified t) 10 17 (fontified t) 17 21 (fontified t) 21 26 (fontified t) 26 31 (fontified t)) ";; saveplace
(if (version< emacs-version \"25.1\")
    (progn
      (require 'saveplace)
      (setq-default save-place t))
  (save-place-mode t)
  (setq save-place-file (no-littering-expand-var-file-name \"saveplace.log\")))"))
(setq search-ring '("abbre" "init"))
(setq regexp-search-ring 'nil)
